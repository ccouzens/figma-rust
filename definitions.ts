/*
 Generated by typeshare 1.4.0
*/

/** [Figma documentation](https://www.figma.com/developers/api#color-type) */
export interface Color {
	r: number;
	g: number;
	b: number;
	a: number;
}

/** [Figma documentation](https://www.figma.com/developers/api#vector-type) */
export interface Vector {
	x: number;
	y: number;
}

/**
 * how layer blends with layers below
 * 
 * [Figma documentation](https://www.figma.com/developers/api#blendmode-type)
 */
export enum BlendMode {
	PassThrough = "PASS_THROUGH",
	Normal = "NORMAL",
	Darken = "DARKEN",
	Multiply = "MULTIPLY",
	LinearBurn = "LINEAR_BURN",
	ColorBurn = "COLOR_BURN",
	Lighten = "LIGHTEN",
	Screen = "SCREEN",
	LinearDodge = "LINEAR_DODGE",
	ColorDodge = "COLOR_DODGE",
	Overlay = "OVERLAY",
	SoftLight = "SOFT_LIGHT",
	HardLight = "HARD_LIGHT",
	Difference = "DIFFERENCE",
	Exclusion = "EXCLUSION",
	Hue = "HUE",
	Saturation = "SATURATION",
	Color = "COLOR",
	Luminosity = "LUMINOSITY",
}

/**
 * Animation easing curves
 * 
 * [Figma documentation](https://www.figma.com/developers/api#easingtype-type)
 */
export enum EasingType {
	/** Ease in with an animation curve similar to CSS ease-in */
	EaseIn = "EASE_IN",
	/** Ease out with an animation curve similar to CSS ease-out */
	EaseOut = "EASE_OUT",
	/** Ease in and then out with an animation curve similar to CSS ease-in-out */
	EaseInAndOut = "EASE_IN_AND_OUT",
	/** No easing, similar to CSS linear */
	Linear = "LINEAR",
	EaseInBack = "EASE_IN_BACK",
	EaseOutBack = "EASE_OUT_BACK",
	EaseInAndOutBack = "EASE_IN_AND_OUT_BACK",
	CustomBezier = "CUSTOM_BEZIER",
	Gentle = "GENTLE",
	Quick = "QUICK",
	Bouncy = "BOUNCY",
	Slow = "SLOW",
	CustomSpring = "CUSTOM_SPRING",
}

export enum StyleTypeMapKey {
	Fill = "fill",
	Fills = "fills",
	Text = "text",
	Grid = "grid",
	Effect = "effect",
	Stroke = "stroke",
	Strokes = "strokes",
}

export enum StrokeAlign {
	/** stroke drawn inside the shape boundary */
	Inside = "INSIDE",
	/** stroke drawn outside the shape boundary */
	Outside = "OUTSIDE",
	/** stroke drawn centered along the shape boundary */
	Center = "CENTER",
}

/** Node type indicates what kind of node you are working with: for example, a FRAME node versus a RECTANGLE node. A node can have additional properties associated with it depending on its node type. */
export enum NodeType {
	Document = "DOCUMENT",
	Canvas = "CANVAS",
	Frame = "FRAME",
	Group = "GROUP",
	Vector = "VECTOR",
	BooleanOperation = "BOOLEAN_OPERATION",
	Star = "STAR",
	Line = "LINE",
	Ellipse = "ELLIPSE",
	RegularPolygon = "REGULAR_POLYGON",
	Rectangle = "RECTANGLE",
	Text = "TEXT",
	Slice = "SLICE",
	Component = "COMPONENT",
	ComponentSet = "COMPONENT_SET",
	Instance = "INSTANCE",
	Sticky = "STICKY",
	ShapeWithText = "SHAPE_WITH_TEXT",
	Connector = "CONNECTOR",
}

export enum PaintType {
	Solid = "SOLID",
	GradientLinear = "GRADIENT_LINEAR",
	GradientRadial = "GRADIENT_RADIAL",
	GradientAngular = "GRADIENT_ANGULAR",
	GradientDiamond = "GRADIENT_DIAMOND",
	Image = "IMAGE",
}

